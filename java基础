java基础：http://www.runoob.com/java/java-tutorial.html

-----------------------------------------------------------------------
bit、byte、位、字节、汉字的关系

        1 bit     = 1  二进制数据
        1 byte  = 8  bit
        1 字母 = 1  byte = 8 bit
        1 汉字 = 2  byte = 16 bit

1. bit：位
    一个二进制数据0或1，是1bit；
2. byte：字节
    存储空间的基本计量单位，如：MySQL中定义 VARCHAR(45)  即是指 45个字节；
    1 byte = 8 bit
3. 一个英文字符占一个字节；
    1 字母 = 1 byte = 8 bit
4. 一个汉字占2个字节；
    1 汉字 = 2 byte = 16 bit
5. 标点符号
    A>.  汉字输入状态下，默认为全角输入方式；
    B>.  英文输入状态下，默认为半角输入方式；
    C>.  全角输入方式下，标点符号占2字节；
    D>.  半角输入方式下，标点符号占1字节；
    故：汉字输入状态下的字符，占2个字节 (但不排除，自己更改了默认设置)；
            英文输入状态下的字符，占1个字节 (但不排除，自己更改了默认设置)；
 -------------------------------------------------------------------------------
 Java 中静态变量和实例变量区别
 1.静态变量属于类，该类不生产对象，通过类名就可以调用静态变量。
 2.实例变量属于该类的对象，必须产生该类对象，才能调用实例变量。
 
 在程序运行时的区别：
实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。
 静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。
总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。
例如，对于下面的程序，无论创建多少个实例对象，
永远都只分配了一个 staticInt 变量，并且每创建一个实例对象，这个 staticInt 就会加 1；但是，每创建一个实例对象，就会分配一个 random，
即可能分配多个 random ，并且每个 random 的值都只自加了1次。
public class StaticTest {
    private static int staticInt = 2;
    private int random = 2;

    public StaticTest() {
        staticInt++;
        random++;
        System.out.println("staticInt = "+staticInt+"  random = "+random);
    }

    public static void main(String[] args) {
        StaticTest test = new StaticTest();
        StaticTest test2 = new StaticTest();
    }
}
执行以上程序，输出结果为：
staticInt = 3  random = 3
staticInt = 4  random = 3
---------------------------------------------------------------------------------------
Java语言提供了很多修饰符，主要分为以下两类：
访问修饰符
非访问修饰符

非访问修饰符
为了实现一些其他的功能，Java 也提供了许多非访问修饰符。
static 修饰符，用来修饰类方法和类变量。
final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
abstract 修饰符，用来创建抽象类和抽象方法。
synchronized 和 volatile 修饰符，主要用于线程的编程。

abstract 修饰符
抽象类：
抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。
一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。
抽象类可以包含抽象方法和非抽象方法。
实例
abstract class Caravan{
   private double price;
   private String model;
   private String year;
   public abstract void goFast(); //抽象方法
   public abstract void changeColor();
}
抽象方法
抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。
抽象方法不能被声明成 final 和 static。
任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。
如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。
抽象方法的声明以分号结尾，例如：public abstract sample();。
实例
public abstract class SuperClass{
    abstract void m(); //抽象方法
}
 
class SubClass extends SuperClass{
     //实现抽象方法
      void m(){
          .........
      }
}
--------------------------------------------------------------------------------
把运算符分成以下几组：
算术运算符
关系运算符
位运算符
逻辑运算符
赋值运算符
其他运算符
-----------------------------------------------------
Java中有三种主要的循环结构：
while 循环
do…while 循环
for 循环









 
